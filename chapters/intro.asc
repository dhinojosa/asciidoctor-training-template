== Introduction to Cypress.io
== Cypress

image::images/cypressLogo.png[]

=== What is Cypress?

* Cypress is a open source end-to-end test runner
* Cypress is a JavaScript Alternative to Java's Selenium

[.columns]
=== What is Cypress? (cont.)
[.column]
--
* All in one inclusive testing framework
* For both developers and QA engineers
* Native access to everything
--

[.column]
--
* Works on any frontend framework or website 
* Written in JavaScript

--

[.columns]
=== Cypress Features
[.column]
* Time travel and debugging 
* Spies, stubs, clocks 
* Automatic waiting 

[.column]
* Network traffic controls 
* Reliable and Fast 
* Screenable and videos 

=== Benefits of Using Cypress
* Makes end to end testing easier 
** Catch Bugs Early 
** Saves Time 
** High Quality Software for Client

* Essentially, Cypress is faster, easier, and reliable end to end testing framework

=== Demo of Simple Testing
* How Cypress Tester Should Look

image::images/cypressTestExample.png[]
//add demo of test on kitchen

== Selenium versus Cypress.io
image::cypressSelenium.jpeg[]

[.columns]
== Selenium versus Cypress.io

[.column]

Before Cypress
----
* Framwork (Jasmine, Mocha, Karma)
* Assertion Library (Chai, Expect.js)
* Install Selenium
* Selenium Wrapper
----

[.column]
After Cypress
----
* All in one testing framework, Assertion Library, with mocking and stubbing
----

== Disadvantages to Cypress
* Run inside the browser 
* Cannot use other languages other than JavaScript
* Harder to communicate with backend
* No multi-tabs support 
* Cannot visit two domains of the different origin in the same test 


== Getting Started with Cyress
Installation

* https://docs.cypress.io/guides/getting-started/installing-cypress#Continuous-integration 

Opening Cypress

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
./node_modules/.bin/cypress open
----

=== Writing Your First Test
* Successful Test
* Comparing "my_name" to "my_name"
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
describe('My First Test', () => {
    it('Does not do much!', () => {
      expect("my_name").to.equal("my_name")
    })
  })
----

=== Writing Your First Test (Cont.)
image::firstTestSuccess.png[]

=== Writing Your First Test (Cont.)
* Falied Test
* Comparing "my_name" to "my_lastname"
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
describe('My First Test', () => {
    it('Does not do much!', () => {
      expect("my_name").to.equal("my_lastname")
    })
  })
----

=== Writing Your First Test (Cont.)
image::firstTestFail.png[]

//Add slides depending 
=== Demo with Actual Web Application
image::hoverExample.png[]

== Cypress Core Concepts 
=== Organization of Cypress
* Once intalled Cypress contains 5 different folders 
** Fixtures
** Integration
** Pluggins
** Assert
** Support

=== Fixtures File
* Put all Json files here
* External pieces of data that can be used by tests 
* Used mostly with _.fixture()_ command when stubbing

image::fileOrganization.png[]

=== Integration File
* All the test files go here
** .js
** .jsx
** .coffee
** .cjsx

image::fileOrganization.png[]


=== Plugins File
* Here is where all the plugins go
* Cypress comes with a premaid index.js file for convenience
* Special File that is executed before project is loaded 
* Runs in the background with Node
Access file system using _.task()_ command
* https://docs.cypress.io/guides/tooling/plugins-guide 

image::fileOrganization.png[]

== Assert Files 
* Folders that can be generated after test is run
** Downloads
** Screenshots 
** Videos

image::fileOrganization.png[]

== Support File
* Also comes with an index.js file 
* Runs before every spec
* Great place ot include reusable code, custom commands, and utility functions 

image::fileOrganization.png[]

== Elements of Cypress
=== Cypress Commands
* Comes with a large set of commands 
** https://example.cypress.io/ 
* Exist as parent, child, and dual commands
* Provides API for creating custom commands 

=== Parent commmand (examples)
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.visit('https://bonigarcia.dev/selenium-webdriver-java')

cy.contains("Login")

cy.get('#username')

cy.screenshot("hello-world-cypres")
----

=== Child Command (examples)
* Commands that are chained to the parent command
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.contains("Login").click()
     
cy.get('#username').type('user')    
----
* In these examples, click() and type() are the the child commands respectively

=== Dual Commands (examples)
* Commands that can act as either a parent or child command
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.contains()
     
cy.screenshot()

cy.wait()
----

//Differnent example from same website 
== Demo on Web Application Using Commands Previously Learned 

//Possibliy start Lab 1

== Assertions
=== Assertions
* Cypress provides assertions for popular libraries (Chai, Sinon, jQuery)
** https://docs.cypress.io/guides/references/assertions 
* Split into two categories:
** BDD (Beharvioral Driven Developemet Assertions)
*** expect()
*** should()
** TDD (Test Driven Development Assertions)
*** isNull()

=== Assertions(cont.)
* Assertions represent the desired state of your object or applications
* What to expect, if certain part is executed


=== Assertions Example
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.url().should('include', '/login-form.html')
----

image::assertionExample.png[]

* Once the link is clicked, we should expect some specific change in the url

=== Built-in Assertions
* Better to not overuse the assertions as you can use the other functions to determine if theres are issues

Many functions are built in assertions::
* _.visit()_
* _.request()_
* _.contains()_
* _.get()_

=== Implicit Versus Explicit Assertions

* Implicit Assertions use commands like _.should()_ and _.and()_ like in the example on the previous slide
* Explicit Assertions use _expect_

Example:: 
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
expect(true).to.be.true
----

* Should use to perform logic operations or make multiple assertions on the same subject 
** Otherwise use implicit assertions


=== Retry-ability 
* Efficiently tests applications
* Applications are asynchronous
** If a query fails, then it will keep retrying until the application udates or timesout
* Only retries commands that query DOM (.get(), .contains())

=== Retry-abilty (cont.)
* Will retry until DOM element is rendered(leeway of milliseconds to seconds) or until test times out
* Not all commands as retried as they could potential change the state of an application

=== Timeouts
Increase time:: 
* Change Default Time 
 
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cypress run --config defaultCommandTimeout=10000
----
* Integrate with command

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.get('/', { timeout: 10000 }) 
----

Disable Retry:: 
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.get('/', { timeout: 0 })
----

=== Effectively Use Retry-Ability
* Only the last command is retried
* Merge commands 
** Avoid splitting commands unnecessarily 
* Alternate between commands and assertions
* Use _.should()_ with a callback
* Use Aliases

== Element Interaction
=== Actionabilty
* Commands used to stimulate action:
** _.click()_
** _.type()_
** _.trigger()_
** Etc.

* Elememt needs to be considered actionale for commands to run
** Cypress runs many tests 

=== Cypress Element Actionalble Tests 
Visibility::
* Cypress has multiple checks to determine visibility of elements 
** Width and height 
** CSS properties of visibility, display, position
** And many others 

Disability:: 
* Checks if the disabled property is true

Detached::
* Checks if element is detached from the DOM 

=== Cypress Element Actionalble Tests (cont.)

Readonly::
* Checks whether the readonly is set during _.type()_

Animations::
* Calculate the time duration of animation and wait for it to finish

Covering::
* Checks if element is not covered by a parent element 

Scrolling:: 
* Scrolls element into view before any desired interactions

=== Debugging and Forcing:
* After the element is determined to be actionable, the commands will run
Debugging::
* Not all debugging is visible so use _.debug()_ command before action 

Forcing::
* Force a command to pass if element is not actionable

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.get('button').click({ force: true })  
----


=== Closure 
* Access what each Cypress command outputs use _.then()_
[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.get('button').then(($btn) => {
}) 
----
* Commands that are outside the then will run after the commands in the then statement are finished 

=== Variables
* Donâ€™t have to use const, let, or var due to access with closure 
* Use a variable when an object is mutable so you can store the value 

=== Aliases
* Aliases assist with reptittion in the code 
* Create alieases towards the begining and not deep in chain
* Can refrence aliases using  _@_ symbol

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.get('#username').type('user').as('GetUsername')


cy.get('@GetUsername')
----
* The _@_ symbol allows us to keep each command asynchronous 
* Can alias interception routes and requests using the same method

=== Aliases (cont.)
* Aliases can be reset before each test using _beforeEach_

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
beforeEach(() => {
  cy.wrap('//').as('example')
})

it('works', () => {
  cy.get('@example').should('include', '//')
})

it('works 2', () => {
  cy.get('@example').should('include', '//')
})

----

== Debugging
=== Debugging
* Travel back to each command
* Receive additional Output 
* Step forward / backward between multiple commands
* Pause and Iterate through commands
* Visualize multiple elements

=== Pinned Command Example
image::pinExample.png[]

=== Errors
* Error name 
** Type of error (AssertionError, CypressError, etc.)
* Error message
** Message about what went wrong
* Learn more
** Sometimes a link to learn more about error
* Code frame
** Shows which line is causing the error
* View stack trace
* Print to console button

=== Error Example
image::errorExample.png[]

=== Good Commands for Debugging
* cy.debug()
* cy.pause()
* Use _debugger_ within a then statement


== Stubs, Spies, and Clocks
=== Stubs 
* Used to modify a function and control the behavior
* Used in unit test

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.stub()

cy.stub(obj, 'method')
----
* Use a stub when the function you are trying to control has a different output than intended

=== Spies 
* Captures and Asserts the function with the right arguments or called a specific number of times
Does not modify the behavior of the function

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.spy(obj, 'method')
----

=== Clock
* Controls on _Date_, _setTimeout_, and _setInterval_

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.clock()
cy.visit('http://localhost:8000â€™)
cy.contains("Login").click()
cy.tick(1000)
----

Reset Clock:: 

[source, JavaScript, subs="attributes,quotes,verbatim"]
----
cy.clock().invoke('restore')
----




